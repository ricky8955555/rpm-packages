diff --git a/src/desktop/Window.cpp b/src/desktop/Window.cpp
index 78f12a11..6719dd4b 100644
--- a/src/desktop/Window.cpp
+++ b/src/desktop/Window.cpp
@@ -16,6 +16,7 @@
 #include "../managers/TokenManager.hpp"
 #include "../managers/animation/AnimationManager.hpp"
 #include "../managers/ANRManager.hpp"
+#include "../protocols/XDGOutput.hpp"
 #include "../protocols/XDGShell.hpp"
 #include "../protocols/core/Compositor.hpp"
 #include "../protocols/core/Subcompositor.hpp"
@@ -1777,10 +1778,13 @@ Vector2D CWindow::xwaylandPositionToReal(Vector2D pos) {
 void CWindow::updateX11SurfaceScale() {
     static auto PXWLFORCESCALEZERO = CConfigValue<Hyprlang::INT>("xwayland:force_zero_scaling");
 
-    m_X11SurfaceScaledBy = 1.0f;
-    if (m_isX11 && *PXWLFORCESCALEZERO) {
-        if (const auto PMONITOR = m_monitor.lock(); PMONITOR)
-            m_X11SurfaceScaledBy = PMONITOR->m_scale;
+    if (m_isX11) {
+        m_X11SurfaceScaledBy = g_pXWayland->m_wm->getScale();
+
+        if (*PXWLFORCESCALEZERO) {
+            if (const auto PMONITOR = m_monitor.lock(); PMONITOR)
+                m_X11SurfaceScaledBy = PMONITOR->m_scale;
+        }
     }
 }
 
@@ -1909,4 +1913,4 @@ SP<CWLSurfaceResource> CWindow::getSolitaryResource() {
     }
 
     return nullptr;
-}
\ No newline at end of file
+}
diff --git a/src/protocols/XDGOutput.cpp b/src/protocols/XDGOutput.cpp
index ccb78e98..1c2a9fbd 100644
--- a/src/protocols/XDGOutput.cpp
+++ b/src/protocols/XDGOutput.cpp
@@ -110,11 +110,15 @@ void CXDGOutput::sendDetails() {
     if UNLIKELY (!m_monitor || !m_outputProto || m_outputProto->isDefunct())
         return;
 
-    const auto POS = m_isXWayland ? m_monitor->m_xwaylandPosition : m_monitor->m_position;
+    const auto XWLWMSCALE = g_pXWayland->m_wm ? g_pXWayland->m_wm->getScale() : 1.f;
+
+    const auto POS = m_isXWayland ? m_monitor->m_xwaylandPosition * XWLWMSCALE : m_monitor->m_position;
     m_resource->sendLogicalPosition(POS.x, POS.y);
 
-    if (*PXWLFORCESCALEZERO && m_isXWayland)
-        m_resource->sendLogicalSize(m_monitor->m_transformedSize.x, m_monitor->m_transformedSize.y);
+    if (m_isXWayland) {
+        m_resource->sendLogicalSize((*PXWLFORCESCALEZERO ? m_monitor->m_transformedSize.x : m_monitor->m_size.x) * XWLWMSCALE,
+                (*PXWLFORCESCALEZERO ? m_monitor->m_transformedSize.y : m_monitor->m_size.y) * XWLWMSCALE);
+    }
     else
         m_resource->sendLogicalSize(m_monitor->m_size.x, m_monitor->m_size.y);
 
diff --git a/src/xwayland/XSurface.cpp b/src/xwayland/XSurface.cpp
index fc92e480..f8a8843c 100644
--- a/src/xwayland/XSurface.cpp
+++ b/src/xwayland/XSurface.cpp
@@ -168,7 +168,8 @@ void CXWaylandSurface::configure(const CBox& box) {
     m_geometry = box;
 
     uint32_t mask     = XCB_CONFIG_WINDOW_X | XCB_CONFIG_WINDOW_Y | XCB_CONFIG_WINDOW_WIDTH | XCB_CONFIG_WINDOW_HEIGHT | XCB_CONFIG_WINDOW_BORDER_WIDTH;
-    uint32_t values[] = {box.x, box.y, box.width, box.height, 0};
+    uint32_t values[] = {g_pXWayland->m_wm->applyScale(box.x), g_pXWayland->m_wm->applyScale(box.y), g_pXWayland->m_wm->applyScale(box.width),
+                         g_pXWayland->m_wm->applyScale(box.height), 0};
     xcb_configure_window(g_pXWayland->m_wm->getConnection(), m_xID, mask, values);
 
     if (m_geometry.width == box.width && m_geometry.height == box.height) {
@@ -177,10 +178,10 @@ void CXWaylandSurface::configure(const CBox& box) {
         e.response_type     = XCB_CONFIGURE_NOTIFY;
         e.event             = m_xID;
         e.window            = m_xID;
-        e.x                 = box.x;
-        e.y                 = box.y;
-        e.width             = box.width;
-        e.height            = box.height;
+        e.x                 = g_pXWayland->m_wm->applyScale(box.x);
+        e.y                 = g_pXWayland->m_wm->applyScale(box.y);
+        e.width             = g_pXWayland->m_wm->applyScale(box.width);
+        e.height            = g_pXWayland->m_wm->applyScale(box.height);
         e.border_width      = 0;
         e.above_sibling     = XCB_NONE;
         e.override_redirect = m_overrideRedirect;
diff --git a/src/xwayland/XWM.cpp b/src/xwayland/XWM.cpp
index 5435e264..ba72c30e 100644
--- a/src/xwayland/XWM.cpp
+++ b/src/xwayland/XWM.cpp
@@ -18,6 +18,7 @@
 #include "../managers/eventLoop/EventLoopManager.hpp"
 #include "../managers/SeatManager.hpp"
 #include "../managers/ANRManager.hpp"
+#include "../protocols/XDGOutput.hpp"
 #include "../protocols/XWaylandShell.hpp"
 #include "../protocols/core/Compositor.hpp"
 using Hyprutils::Memory::CUniquePointer;
@@ -53,8 +54,9 @@ void CXWM::handleCreate(xcb_create_notify_event_t* e) {
     if (isWMWindow(e->window))
         return;
 
-    const auto XSURF = m_surfaces.emplace_back(SP<CXWaylandSurface>(new CXWaylandSurface(e->window, CBox{e->x, e->y, e->width, e->height}, e->override_redirect)));
-    XSURF->m_self    = XSURF;
+    const auto XSURF = m_surfaces.emplace_back(
+        SP<CXWaylandSurface>(new CXWaylandSurface(e->window, CBox{applyUnScale(e->x), applyUnScale(e->y), applyUnScale(e->width), applyUnScale(e->height)}, e->override_redirect)));
+    XSURF->m_self = XSURF;
     Debug::log(LOG, "[xwm] New XSurface at {:x} with xid of {}", rc<uintptr_t>(XSURF.get()), e->window);
 
     const auto WINDOW = CWindow::create(XSURF);
@@ -84,9 +86,9 @@ void CXWM::handleConfigureRequest(xcb_configure_request_event_t* e) {
     if (!(MASK & GEOMETRY))
         return;
 
-    XSURF->m_events.configureRequest.emit(CBox{MASK & XCB_CONFIG_WINDOW_X ? e->x : XSURF->m_geometry.x, MASK & XCB_CONFIG_WINDOW_Y ? e->y : XSURF->m_geometry.y,
-                                               MASK & XCB_CONFIG_WINDOW_WIDTH ? e->width : XSURF->m_geometry.width,
-                                               MASK & XCB_CONFIG_WINDOW_HEIGHT ? e->height : XSURF->m_geometry.height});
+    XSURF->m_events.configureRequest.emit(CBox{
+        MASK & XCB_CONFIG_WINDOW_X ? applyUnScale(e->x) : XSURF->m_geometry.x, MASK & XCB_CONFIG_WINDOW_Y ? applyUnScale(e->y) : XSURF->m_geometry.y,
+        MASK & XCB_CONFIG_WINDOW_WIDTH ? applyUnScale(e->width) : XSURF->m_geometry.width, MASK & XCB_CONFIG_WINDOW_HEIGHT ? applyUnScale(e->height) : XSURF->m_geometry.height});
 }
 
 void CXWM::handleConfigureNotify(xcb_configure_notify_event_t* e) {
@@ -95,10 +97,11 @@ void CXWM::handleConfigureNotify(xcb_configure_notify_event_t* e) {
     if (!XSURF)
         return;
 
-    if (XSURF->m_geometry == CBox{e->x, e->y, e->width, e->height})
+    const auto GEOM = CBox{applyUnScale(e->x), applyUnScale(e->y), applyUnScale(e->width), applyUnScale(e->height)};
+    if (XSURF->m_geometry == GEOM)
         return;
 
-    XSURF->m_geometry = {e->x, e->y, e->width, e->height};
+    XSURF->m_geometry = GEOM;
     updateOverrideRedirect(XSURF, e->override_redirect);
     XSURF->m_events.setGeometry.emit();
 }
@@ -284,6 +287,17 @@ void CXWM::readProp(SP<CXWaylandSurface> XSURF, uint32_t atom, xcb_get_property_
         std::memset(XSURF->m_sizeHints.get(), 0, sizeof(xcb_size_hints_t));
         xcb_icccm_get_wm_size_hints_from_reply(XSURF->m_sizeHints.get(), reply);
 
+        XSURF->m_sizeHints->x           = applyUnScale(XSURF->m_sizeHints->x);
+        XSURF->m_sizeHints->y           = applyUnScale(XSURF->m_sizeHints->y);
+        XSURF->m_sizeHints->width       = applyUnScale(XSURF->m_sizeHints->width);
+        XSURF->m_sizeHints->height      = applyUnScale(XSURF->m_sizeHints->height);
+        XSURF->m_sizeHints->min_width   = applyUnScale(XSURF->m_sizeHints->min_width);
+        XSURF->m_sizeHints->min_height  = applyUnScale(XSURF->m_sizeHints->min_height);
+        XSURF->m_sizeHints->max_width   = applyUnScale(XSURF->m_sizeHints->max_width);
+        XSURF->m_sizeHints->max_height  = applyUnScale(XSURF->m_sizeHints->max_height);
+        XSURF->m_sizeHints->base_width  = applyUnScale(XSURF->m_sizeHints->base_width);
+        XSURF->m_sizeHints->base_height = applyUnScale(XSURF->m_sizeHints->base_height);
+
         const int32_t FLAGS   = XSURF->m_sizeHints->flags;
         const bool    HASMIN  = FLAGS & XCB_ICCCM_SIZE_HINT_P_MIN_SIZE;
         const bool    HASBASE = FLAGS & XCB_ICCCM_SIZE_HINT_BASE_SIZE;
@@ -339,8 +353,21 @@ void CXWM::readProp(SP<CXWaylandSurface> XSURF, uint32_t atom, xcb_get_property_
 void CXWM::handlePropertyNotify(xcb_property_notify_event_t* e) {
     const auto XSURF = windowForXID(e->window);
 
-    if (!XSURF)
+    if (!XSURF) {
+        if (e->atom == HYPRATOMS["_XWAYLAND_GLOBAL_OUTPUT_SCALE"]) {
+            xcb_get_property_cookie_t cookie = xcb_get_property(getConnection(), 0, e->window, e->atom, XCB_ATOM_ANY, 0, 2048);
+            xcb_get_property_reply_t* reply  = xcb_get_property_reply(getConnection(), cookie, nullptr);
+            if (!reply) {
+                return;
+            }
+            if (reply->type == XCB_ATOM_CARDINAL) {
+                m_scale = *(uint32_t*)xcb_get_property_value(reply);
+            }
+            free(reply);
+            PROTO::xdgOutput->updateAllOutputs();
+        }
         return;
+    }
 
     xcb_get_property_cookie_t             cookie = xcb_get_property(getConnection(), 0, XSURF->m_xID, e->atom, XCB_ATOM_ANY, 0, 2048);
     XCBReplyPtr<xcb_get_property_reply_t> reply(xcb_get_property_reply(getConnection(), cookie, nullptr));
@@ -1372,6 +1399,18 @@ SP<IDataOffer> CXWM::createX11DataOffer(SP<CWLSurfaceResource> surf, SP<IDataSou
     return offer;
 }
 
+double CXWM::getScale() {
+    return m_scale;
+}
+
+double CXWM::applyScale(double val) {
+    return std::floor(val * m_scale);
+}
+
+double CXWM::applyUnScale(double val) {
+    return std::ceil(val / m_scale);
+}
+
 void SXSelection::onSelection() {
     const bool isClipboard = this == &g_pXWayland->m_wm->m_clipboard;
     const bool isPrimary   = this == &g_pXWayland->m_wm->m_primarySelection;
diff --git a/src/xwayland/XWM.hpp b/src/xwayland/XWM.hpp
index b03ab4b2..7922f05d 100644
--- a/src/xwayland/XWM.hpp
+++ b/src/xwayland/XWM.hpp
@@ -118,6 +118,7 @@ class CXWM {
     int                onEvent(int fd, uint32_t mask);
     SP<CX11DataDevice> getDataDevice();
     SP<IDataOffer>     createX11DataOffer(SP<CWLSurfaceResource> surf, SP<IDataSource> source);
+    double             getScale();
 
   private:
     void                 setCursor(unsigned char* pixData, uint32_t stride, const Vector2D& size, const Vector2D& hotspot);
@@ -179,12 +180,16 @@ class CXWM {
 
     SXSelection* getSelection(xcb_atom_t atom);
 
+    double       applyScale(double val);
+    double       applyUnScale(double val);
+
     //
     UP<CXCBConnection>                        m_connection;
     xcb_errors_context_t*                     m_errors = nullptr;
     xcb_screen_t*                             m_screen = nullptr;
 
     xcb_window_t                              m_wmWindow;
+    double                                    m_scale = 1.0;
 
     wl_event_source*                          m_eventSource = nullptr;
 
diff --git a/src/xwayland/XWayland.hpp b/src/xwayland/XWayland.hpp
index 7fd6e354..b83ecdfb 100644
--- a/src/xwayland/XWayland.hpp
+++ b/src/xwayland/XWayland.hpp
@@ -127,5 +127,6 @@ inline std::unordered_map<std::string, uint32_t> HYPRATOMS = {
     HYPRATOM("DELETE"),
     HYPRATOM("TEXT"),
     HYPRATOM("INCR"),
+    HYPRATOM("_XWAYLAND_GLOBAL_OUTPUT_SCALE"),
 #endif
 };
